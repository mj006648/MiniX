# Argo CD 관련 전역 설정
argo:
    namespace: argocd
    project: default
    server: https://kubernetes.default.svc
    sourceRepo:
        url: https://github.com/mj006648/MiniX.git
        branch: main


# 개별 애플리케이션 설정
applications:
    # 단순 yaml 파일들로 관리되는 애플리케이션
    # 첫 번째 애플리케이션
    cluster-config:
      enabled: true
      namespace: default
      syncWave: "-1"
      source:
        path: "argocd/minix/apps/cluster-config"
    
    metallb-resources:
      enabled: true
      namespace: metallb-system
      syncWave: "4"
      source:
        path: "argocd/minix/apps/metallb-resources"

    # Grafana Secret을 가장 먼저 배포
    grafana-resources:
      enabled: true
      namespace: monitoring
      syncWave: "5" # Prometheus보다 먼저 실행되어야 함
      source:
        path: "argocd/minix/apps/grafana-resources"

    # Wave 12: 클러스터가 준비된 후, 스토리지 리소스와 툴박스를 배포 (YAML)
    rook-ceph-resources:
      enabled: true
      namespace: rook-ceph # 리소스들이 생성될 기본 네임스페이스
      syncWave: "3"
      source:
        path: "argocd/minix/apps/rook-ceph-resources"
      # 동기화 옵션을 설정하여 서버 측에서 추가된 필드를 무시하도록 합니다.
      syncOptions:
        - ServerSideApply=true

    twinx-web:
      enabled: true
      namespace: tx-service
      syncWave: "30"
      source:
        path: "argocd/minix/apps/twinx-web"
   
    # (Operator가 생성된 후, CRD들이 배포되도록)
    confluent-platform:
      enabled: true
      namespace: confluent # 모든 컴포넌트는 confluent 네임스페이스에 배포
      syncWave: "9"
      source:
        path: "argocd/minix/apps/confluent-platform"

    # (플랫폼이 완전히 준비된 후)
    confluent-resources:
      enabled: true
      namespace: confluent
      syncWave: "10"
      source:
        path: "argocd/minix/apps/confluent-resources"

    # Wave 11: 데이터 축적(accumulation)을 위한 네임스페이스와 S3 버킷 생성
    accumulation:
      enabled: true
      # 이 애플리케이션이 관리하는 리소스들이 생성될 기본 네임스페이스
      namespace: accumulation
      # Ceph StorageClass(rook-ceph-bucket)가 생성된 후에 실행되어야 하므로 더 높은 syncWave를 부여
      syncWave: "11"
      source:
        # 1단계에서 만든 디렉토리 경로를 정확히 지정
        path: "argocd/minix/apps/accumulation"

    # Wave 13: Nessie 추가 리소스 (Secret, LoadBalancers)
    # Helm 차트가 관리하지 않는, 우리가 직접 정의한 추가 리소스들을 배포합니다.
    nessie-resources:
      enabled: true
      namespace: nessie-ns
      syncWave: "13" # nessie Helm 차트와 동시에 배포
      source:
        path: "argocd/minix/apps/nessie"
        directory:
          # values.yaml을 제외한 나머지 YAML 파일들만 배포 대상으로 지정
          exclude: "values.yaml"
          recurse: true
      syncOptions:
        - CreateNamespace=true
    
    spark-jobs:
      enabled: true
      namespace: spark-operator
      syncWave: "15"
      source:
        path: "argocd/minix/apps/spark-jobs" 
    # Helm 차트로 관리되는 애플리케이션
    metallb:
        enabled: true
        namespace: metallb-system
        syncWave: "0"
        source:
            type: helm
            repoURL: https://metallb.github.io/metallb
            chart: metallb
            targetRevision: 0.15.2
            helm:
                valueFiles:
                    - "argocd/minix/apps/metallb/values.yaml"

    # Prometheus 스택 배포
    prometheus:
      enabled: true
      namespace: monitoring
      syncWave: "6" # Secret이 준비된 후 실행
      source:
        type: helm
        repoURL: https://prometheus-community.github.io/helm-charts
        chart: prometheus
        targetRevision: 27.32.0
        helm:
          valueFiles:
            - "argocd/minix/apps/prometheus/values.yaml"
    # Grafana 배포
    grafana:
      enabled: true
      namespace: monitoring
      syncWave: "7" # Prometheus가 준비된 후 실행되도록 순서를 조정합니다.
      source:
        type: helm
        repoURL: https://grafana.github.io/helm-charts
        chart: grafana
        targetRevision: 9.3.4
        helm:
          valueFiles:
            - "argocd/minix/apps/grafana/values.yaml"

    # Wave 10: Operator 배포 (헬름)
    rook-ceph-operator:
      enabled: true
      namespace: rook-ceph
      syncWave: "1"
      source:
        repoURL: https://charts.rook.io/release
        chart: rook-ceph
        targetRevision: v1.17.6
        helm:
          valueFiles:
            - "argocd/minix/apps/rook-ceph-operator/values.yaml"

    # Wave 11: Ceph 클러스터 "자체"만 배포 (헬름)
    rook-ceph-cluster:
      enabled: true
      namespace: rook-ceph
      syncWave: "2"
      source:
        repoURL: https://charts.rook.io/release
        chart: rook-ceph-cluster
        targetRevision: v1.17.6
        helm:
          valueFiles:
            - "argocd/minix/apps/rook-ceph-cluster/values.yaml"

    # Wave 20: Confluent Operator (가장 먼저)
    confluent-operator:
      enabled: true
      namespace: confluent
      syncWave: "8"
      source:
        type: helm
        repoURL: https://packages.confluent.io/helm
        chart: confluent-for-kubernetes
        targetRevision: 0.1263.8 # 최신버전
        helm:
          valueFiles:
            - "argocd/minix/apps/confluent-operator/values.yaml"

    # Wave 4: PostgreSQL 단일 인스턴스 배포
    postgresql:
      enabled: true
      namespace: postgre
      syncWave: "12"
      source:
        type: helm
        repoURL: https://charts.bitnami.com/bitnami
        chart: postgresql
        #-- 안정적인 배포를 위해 차트 버전을 명시합니다.
        targetRevision: "16.7.27"
        helm:
          valueFiles:
            - "argocd/minix/apps/postgresql/values.yaml"
    # Helm 차트를 통해 Nessie의 핵심 워크로드(Deployment, 내부 Service 등)를 배포합니다.
    nessie:
      enabled: true
      namespace: nessie-ns
      syncWave: "13" # PostgreSQL 이후에 배포되도록 설정
      source:
        type: helm
        repoURL: https://charts.projectnessie.org
        chart: nessie
        releaseName: nessie # Helm 릴리스 이름을 'nessie'로 고정
        targetRevision: "0.104.9"
        helm:
          valueFiles:
            - "argocd/minix/apps/nessie/values.yaml"
     # Wave 30: Spark Operator (공식 Kubeflow Helm Chart 사용)
    spark-operator:
      enabled: true
      namespace: spark-operator
      syncWave: "14"
      source:
        type: helm
        repoURL: https://kubeflow.github.io/spark-operator
        chart: spark-operator
        targetRevision: "v1beta2-1.6.x-3.5.0"
        helm:
          releaseName: spark-operator
          valueFiles:
            - "argocd/minix/apps/spark-operator/values.yaml"
