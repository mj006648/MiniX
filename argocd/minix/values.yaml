# Argo CD 관련 전역 설정
argo:
    namespace: argocd
    project: default
    server: https://kubernetes.default.svc
    sourceRepo:
        url: https://github.com/mj006648/MiniX.git
        branch: main


# 개별 애플리케이션 설정
applications:
    # 단순 yaml 파일들로 관리되는 애플리케이션
    # 첫 번째 애플리케이션
    cluster-config:
      enabled: false
      namespace: default
      syncWave: "-1"
      source:
        path: "argocd/minix/apps/cluster-config"
    
    metallb-resources:
      enabled: true
      namespace: metallb-system
      syncWave: "4"
      source:
        path: "argocd/minix/apps/metallb-resources"

    # Grafana Secret을 가장 먼저 배포
    grafana-resources:
      enabled: true
      namespace: monitoring
      syncWave: "5" # Prometheus보다 먼저 실행되어야 함
      source:
        path: "argocd/minix/apps/grafana-resources"

    # Wave 12: 클러스터가 준비된 후, 스토리지 리소스와 툴박스를 배포 (YAML)
    rook-ceph-resources:
      enabled: true
      namespace: rook-ceph # 리소스들이 생성될 기본 네임스페이스
      syncWave: "3"
      source:
        path: "argocd/minix/apps/rook-ceph-resources"

    twinx-web:
      enabled: true
      namespace: tx-service
      syncWave: "30"
      source:
        path: "argocd/minix/apps/twinx-web"
   
    # (Operator가 생성된 후, CRD들이 배포되도록)
    confluent-platform:
      enabled: false
      namespace: confluent # 모든 컴포넌트는 confluent 네임스페이스에 배포
      syncWave: "9"
      source:
        path: "argocd/minix/apps/confluent-platform"

    # (플랫폼이 완전히 준비된 후)
    confluent-resources:
      enabled: false
      namespace: confluent
      syncWave: "10"
      source:
        path: "argocd/minix/apps/confluent-resources"

    # Helm 차트로 관리되는 애플리케이션
    metallb:
        enabled: true
        namespace: metallb-system
        syncWave: "0"
        source:
            type: helm
            repoURL: https://metallb.github.io/metallb
            chart: metallb
            targetRevision: 0.15.2
            helm:
                valueFiles:
                    - "argocd/minix/apps/metallb/values.yaml"

    # Prometheus 스택 배포
    prometheus:
      enabled: true
      namespace: monitoring
      syncWave: "6" # Secret이 준비된 후 실행
      source:
        type: helm
        repoURL: https://prometheus-community.github.io/helm-charts
        chart: prometheus
        targetRevision: 27.32.0
        helm:
          valueFiles:
            - "argocd/minix/apps/prometheus/values.yaml"
    # Grafana 배포
    grafana:
      enabled: true
      namespace: monitoring
      syncWave: "7" # Prometheus가 준비된 후 실행되도록 순서를 조정합니다.
      source:
        type: helm
        repoURL: https://grafana.github.io/helm-charts
        chart: grafana
        targetRevision: 9.3.4
        helm:
          valueFiles:
            - "argocd/minix/apps/grafana/values.yaml"

    # Wave 10: Operator 배포 (헬름)
    rook-ceph-operator:
      enabled: true
      namespace: rook-ceph
      syncWave: "1"
      source:
        repoURL: https://charts.rook.io/release
        chart: rook-ceph
        targetRevision: v1.17.6
        helm:
          valueFiles:
            - "argocd/minix/apps/rook-ceph-operator/values.yaml"

    # Wave 11: Ceph 클러스터 "자체"만 배포 (헬름)
    rook-ceph-cluster:
      enabled: true
      namespace: rook-ceph
      syncWave: "2"
      source:
        repoURL: https://charts.rook.io/release
        chart: rook-ceph-cluster
        targetRevision: v1.17.6
        helm:
          valueFiles:
            - "argocd/minix/apps/rook-ceph-cluster/values.yaml"

    # Wave 20: Confluent Operator (가장 먼저)
    confluent-operator:
      enabled: false
      namespace: confluent
      syncWave: "8"
      source:
        type: helm
        repoURL: https://packages.confluent.io/helm
        chart: confluent-for-kubernetes
        targetRevision: 0.1263.8 # 최신버전
        helm:
          valueFiles:
            - "argocd/minix/apps/confluent-operator/values.yaml"
