# spark-jobs/01-job-setup.yaml

# --- RBAC 설정 ---
# Spark 드라이버 Pod가 사용할 서비스 계정
apiVersion: v1
kind: ServiceAccount
metadata:
  name: spark-sa
  namespace: spark-operator
---
# 위 서비스 계정에 부여할 권한 (Pod, Service 생성/삭제 등)
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: spark-driver-role
  namespace: spark-operator
rules:
  - apiGroups: [""]
    resources: ["pods", "services", "configmaps"]
    verbs: ["get", "list", "watch", "create", "update", "delete"]
---
# 서비스 계정과 역할을 연결
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: spark-driver-binding
  namespace: spark-operator
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: spark-driver-role
subjects:
  - kind: ServiceAccount
    name: spark-sa
    namespace: spark-operator
---
# --- S3 접근 정보 Secret ---
apiVersion: v1
kind: Secret
metadata:
  name: s3-creds-for-spark
  namespace: spark-operator
type: Opaque
stringData:
  # 환경변수 이름은 PySpark 스크립트에서 참조할 이름과 일치해야 합니다.
  S3_ENDPOINT: "http://rook-ceph-rgw-my-store.rook-ceph.svc:8080"
  S3_ACCESS_KEY: "LDCMT684CGVXV6P4E0HA"
  S3_SECRET_KEY: "E9dfgciqiyWMD0ukBXT638pY5CggcP7Ble7eBdeu"
---
# --- PySpark 스크립트가 담긴 ConfigMap ---
# 실행할 두 개의 PySpark 스크립트를 쿠버네티스 ConfigMap에 "작업 설명서"처럼 저장합니다.
# 이렇게 하면 Docker 이미지를 다시 빌드하지 않고도 스크립트만 수정하고 재배포할 수 있어 편리합니다.
apiVersion: v1
kind: ConfigMap
metadata:
  name: spark-scripts
  namespace: spark-operator
data:
  # 첫 번째 스크립트: data_validator.py
  data_validator.py: |
    import os
    from pyspark.sql import SparkSession
    from pyspark.sql.functions import col, lit, when, row_number
    from pyspark.sql.window import Window
    from pyspark.sql.utils import AnalysisException

    # Secret을 통해 주입될 환경 변수 (YAML 파일에서 설정)
    S3_ENDPOINT = os.environ.get("S3_ENDPOINT")
    S3_ACCESS_KEY = os.environ.get("S3_ACCESS_KEY")
    S3_SECRET_KEY = os.environ.get("S3_SECRET_KEY")
    # 제공된 Nessie API Loadbalancer 주소
    NESSIE_URI = "http://10.34.48.249:19120/api/v1"

    def get_spark_session():
        """Nessie, Iceberg, S3를 사용하도록 설정된 SparkSession을 생성합니다."""
        return (
            SparkSession.builder
            .appName("ParkingDataValidation")
            .config("spark.sql.catalog.nessie", "org.apache.iceberg.spark.SparkCatalog")
            .config("spark.sql.catalog.nessie.catalog-impl", "org.apache.iceberg.nessie.NessieCatalog")
            .config("spark.sql.catalog.nessie.uri", NESSIE_URI)
            .config("spark.sql.catalog.nessie.ref", "dev") # [핵심] 모든 작업은 'dev' 브랜치에서 수행
            .config("spark.sql.catalog.nessie.authentication.type", "NONE")
            .config("spark.sql.catalog.nessie.warehouse", "s3a://iceberg/warehouse")
            .config("spark.sql.extensions", "org.apache.iceberg.spark.extensions.IcebergSparkSessionExtensions,org.projectnessie.spark.extensions.NessieSparkSessionExtensions")
            .config("spark.hadoop.fs.s3a.endpoint", S3_ENDPOINT)
            .config("spark.hadoop.fs.s3a.access.key", S3_ACCESS_KEY)
            .config("spark.hadoop.fs.s3a.secret.key", S3_SECRET_KEY)
            .config("spark.hadoop.fs.s3a.path.style.access", "true")
            .config("spark.hadoop.fs.s3a.impl", "org.apache.hadoop.fs.s3a.S3AFileSystem")
            .getOrCreate()
        )

    def validate_data(df, primary_key="eventId"):
        """데이터 품질 검증(Null, 중복, 범위)을 수행하고 데이터를 분리합니다."""
        window_spec = Window.partitionBy(primary_key).orderBy(col("timestamp").desc())
        df_with_row_num = df.withColumn("row_num", row_number().over(window_spec))
        validated_df = df_with_row_num.withColumn(
            "untrusted_reason",
            when(col(primary_key).isNull(), "Primary key is null")
            .when(col("row_num") > 1, "Duplicate primary key")
            .when(col("eventType") == "EXIT",
                  when(col("eventDetails.durationInSeconds") < 0, "Negative duration")
            ).otherwise(lit(None))
        )
        trusted_df = validated_df.filter(col("untrusted_reason").isNull()).drop("row_num", "untrusted_reason")
        untrusted_df = validated_df.filter(col("untrusted_reason").isNotNull()).drop("row_num")
        return trusted_df, untrusted_df

    def process_data(spark, data_path, primary_key, trusted_table, untrusted_table):
        try:
            df = spark.read.json(data_path)
            if df.rdd.isEmpty():
                print(f"No new data found in {data_path}. Skipping.")
                return
        except AnalysisException as e:
            if "Path does not exist" in str(e):
                print(f"Path {data_path} does not exist. Skipping.")
                return
            raise e
        trusted_df, untrusted_df = validate_data(df, primary_key)
        if not trusted_df.rdd.isEmpty():
            trusted_df.writeTo(trusted_table).append()
            print(f"Appended {trusted_df.count()} records to {trusted_table}")
        if not untrusted_df.rdd.isEmpty():
            untrusted_df.writeTo(untrusted_table).append()
            print(f"Appended {untrusted_df.count()} records to {untrusted_table}")

    def main():
        spark = get_spark_session()
        from datetime import datetime, timedelta
        today = datetime.utcnow()
        yesterday = today - timedelta(days=1)
        date_paths = [ f"year={d.year}/month={d.month:02d}/day={d.day:02d}" for d in [yesterday, today] ]
        for date_path in date_paths:
            entry_path = f"s3a://iceberg/landing/parking-entries/{date_path}/*"
            process_data(spark, entry_path, "eventId", "nessie.parking_data.trusted_entry_events", "nessie.parking_data.untrusted_entry_events")
            exit_path = f"s3a://iceberg/landing/parking-exits/{date_path}/*"
            process_data(spark, exit_path, "eventId", "nessie.parking_data.trusted_exit_events", "nessie.parking_data.untrusted_exit_events")
        spark.stop()

    if __name__ == "__main__":
        main()

  # 두 번째 스크립트: merge_to_main.py
  merge_to_main.py: |
    import os
    from pyspark.sql import SparkSession

    NESSIE_URI = "http://10.34.48.249:19120/api/v1"

    def main():
        spark = (
            SparkSession.builder
            .appName("NessieMergeToMain")
            .config("spark.sql.catalog.nessie.uri", NESSIE_URI)
            .config("spark.sql.catalog.nessie.ref", "main")
            .config("spark.sql.extensions", "org.projectnessie.spark.extensions.NessieSparkSessionExtensions")
            .getOrCreate()
        )
        print("Attempting to merge 'dev' branch into 'main'...")
        try:
            spark.sql("MERGE BRANCH dev INTO main IN nessie")
            print("Successfully merged 'dev' into 'main'.")
        except Exception as e:
            print(f"An error occurred during merge: {e}")
        spark.stop()

    if __name__ == "__main__":
        main()
