# spark-jobs/01-job-setup.yaml

# --- 1. RBAC(역할 기반 접근 제어) 설정 ---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: spark-sa
  namespace: spark-operator
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: spark-driver-role
  namespace: spark-operator
rules:
  - apiGroups: [""]
    resources:
      - pods
      - services
      - configmaps
      # [추가] PVC 관련 권한을 추가하여 종료 시 발생하는 에러를 방지합니다.
      - persistentvolumeclaims
    verbs: ["*"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: spark-driver-binding
  namespace: spark-operator
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: spark-driver-role
subjects:
  - kind: ServiceAccount
    name: spark-sa
    namespace: spark-operator
---
# --- 2. S3 접근 정보 Secret ---
apiVersion: v1
kind: Secret
metadata:
  name: s3-creds-for-spark
  namespace: spark-operator
type: Opaque
stringData:
  S3_ENDPOINT: "http://rook-ceph-rgw-my-store.rook-ceph.svc:8080"
  S3_ACCESS_KEY: "LDCMT684CGVXV6P4E0HA"
  S3_SECRET_KEY: "E9dfgciqiyWMD0ukBXT638pY5CggcP7Ble7eBdeu"
---
# --- 3. PySpark 스크립트가 담긴 ConfigMap ---
apiVersion: v1
kind: ConfigMap
metadata:
  name: spark-scripts
  namespace: spark-operator
data:
  # 첫 번째 스크립트: data_validator.py (최종 수정본)
  data_validator.py: |
    import os
    from pyspark.sql import SparkSession
    from pyspark.sql.functions import col, lit, when, row_number, to_json, struct, current_timestamp
    from pyspark.sql.window import Window
    from pyspark.sql.utils import AnalysisException

    S3_ENDPOINT = os.environ.get("S3_ENDPOINT")
    S3_ACCESS_KEY = os.environ.get("S3_ACCESS_KEY")
    S3_SECRET_KEY = os.environ.get("S3_SECRET_KEY")
    NESSIE_URI = "http://10.34.48.249:19120/api/v1"

    def get_spark_session():
        return (
            SparkSession.builder.appName("ParkingDataValidation")
            .config("spark.sql.catalog.nessie", "org.apache.iceberg.spark.SparkCatalog")
            .config("spark.sql.catalog.nessie.catalog-impl", "org.apache.iceberg.nessie.NessieCatalog")
            .config("spark.sql.catalog.nessie.uri", NESSIE_URI)
            .config("spark.sql.catalog.nessie.ref", "dev")
            .config("spark.sql.catalog.nessie.warehouse", "s3a://iceberg/warehouse")
            .config("spark.sql.extensions", "org.apache.iceberg.spark.extensions.IcebergSparkSessionExtensions,org.projectnessie.spark.extensions.NessieSparkSessionExtensions")
            .config("spark.hadoop.fs.s3a.endpoint", S3_ENDPOINT)
            .config("spark.hadoop.fs.s3a.access.key", S3_ACCESS_KEY)
            .config("spark.hadoop.fs.s3a.secret.key", S3_SECRET_KEY)
            .config("spark.hadoop.fs.s3a.path.style.access", "true")
            .config("spark.hadoop.fs.s3a.impl", "org.apache.hadoop.fs.s3a.S3AFileSystem")
            .getOrCreate()
        )

    def process_data(spark, data_path, event_type):
        try:
            raw_df = spark.read.json(data_path)
            if raw_df.rdd.isEmpty():
                print(f"No new data found in {data_path}. Skipping.")
                return
        except AnalysisException as e:
            if "Path does not exist" in str(e):
                print(f"Path {data_path} does not exist. Skipping.")
                return
            raise e

        df_with_payload = raw_df.withColumn("raw_payload", to_json(struct([col(c) for c in raw_df.columns])))
        window_spec = Window.partitionBy("eventId").orderBy(col("timestamp").desc())
        df_with_row_num = df_with_payload.withColumn("row_num", row_number().over(window_spec))

        validated_df = df_with_row_num.withColumn(
            "validation_error",
            when(col("eventId").isNull(), "Primary key is null")
            .when(col("row_num") > 1, "Duplicate primary key")
            .when(
                (col("eventType") == "EXIT") & (col("eventDetails.durationInSeconds") < 0),
                "Negative duration"
            )
            .otherwise(lit(None))
        )

        trusted_df = validated_df.filter(col("validation_error").isNull())
        untrusted_df = validated_df.filter(col("validation_error").isNotNull())

        if not trusted_df.rdd.isEmpty():
            if event_type == "ENTRY":
                final_trusted_df = trusted_df.selectExpr(
                    "eventId", "timestamp", "carId",
                    "eventDetails.imagePath as imagePath",
                    "eventDetails.assignedSlotId as slotId",
                    "eventDetails.slotCoordinates as slotCoordinates"
                )
                trusted_table = "nessie.parking_data.trusted_entry_events"
                final_trusted_df.writeTo(trusted_table).append()
                print(f"Appended {final_trusted_df.count()} records to {trusted_table}")
            elif event_type == "EXIT":
                final_trusted_df = trusted_df.selectExpr(
                    "eventId", "timestamp", "carId",
                    "eventDetails.imagePath as imagePath",
                    "eventDetails.assignedSlotId as slotId",
                    "eventDetails.entryTimestamp as entryTimestamp",
                    "eventDetails.durationInSeconds as durationInSeconds",
                    "eventDetails.entryEventId as entryEventId"
                )
                trusted_table = "nessie.parking_data.trusted_exit_events"
                final_trusted_df.writeTo(trusted_table).append()
                print(f"Appended {final_trusted_df.count()} records to {trusted_table}")

        if not untrusted_df.rdd.isEmpty():
            final_untrusted_df = untrusted_df.withColumn("processing_timestamp", current_timestamp())
            if event_type == "ENTRY":
                final_untrusted_df = final_untrusted_df.selectExpr(
                    "eventId", "timestamp", "carId",
                    "eventDetails.imagePath as imagePath",
                    "eventDetails.assignedSlotId as slotId",
                    "eventDetails.slotCoordinates as slotCoordinates",
                    "raw_payload", "validation_error", "processing_timestamp"
                )
                untrusted_table = "nessie.parking_data.untrusted_entry_events"
                final_untrusted_df.writeTo(untrusted_table).append()
                print(f"Appended {final_untrusted_df.count()} records to {untrusted_table}")
            elif event_type == "EXIT":
                final_untrusted_df = final_untrusted_df.selectExpr(
                    "eventId", "timestamp", "carId",
                    "eventDetails.imagePath as imagePath",
                    "eventDetails.assignedSlotId as slotId",
                    "eventDetails.entryTimestamp as entryTimestamp",
                    "eventDetails.durationInSeconds as durationInSeconds",
                    "eventDetails.entryEventId as entryEventId",
                    "raw_payload", "validation_error", "processing_timestamp"
                )
                untrusted_table = "nessie.parking_data.untrusted_exit_events"
                final_untrusted_df.writeTo(untrusted_table).append()
                print(f"Appended {final_untrusted_df.count()} records to {untrusted_table}")

    def main():
        spark = get_spark_session()
        from datetime import datetime, timedelta
        today = datetime.utcnow()
        yesterday = today - timedelta(days=1)
        date_paths = [ f"year={d.year}/month={d.month:02d}/day={d.day:02d}" for d in [yesterday, today] ]
        for date_path in date_paths:
            entry_path = f"s3a://iceberg/landing/parking-entries/{date_path}/*"
            process_data(spark, entry_path, "ENTRY")
            exit_path = f"s3a://iceberg/landing/parking-exits/{date_path}/*"
            process_data(spark, exit_path, "EXIT")
        spark.stop()

    if __name__ == "__main__":
        main()

  # 두 번째 스크립트: merge_to_main.py (변경 없음)
  merge_to_main.py: |
    import os
    from pyspark.sql import SparkSession
    NESSIE_URI = "http://10.34.48.249:19120/api/v1"
    def main():
        spark = (
            SparkSession.builder.appName("NessieMergeToMain")
            .config("spark.sql.catalog.nessie.uri", NESSIE_URI)
            .config("spark.sql.catalog.nessie.ref", "main")
            .config("spark.sql.extensions", "org.projectnessie.spark.extensions.NessieSparkSessionExtensions")
            .getOrCreate()
        )
        print("Attempting to merge 'dev' branch into 'main'...")
        try:
            spark.sql("MERGE BRANCH dev INTO main IN nessie")
            print("Successfully merged 'dev' into 'main'.")
        except Exception as e:
            print(f"An error occurred during merge: {e}")
        spark.stop()
    if __name__ == "__main__":
        main()
